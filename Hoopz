local Fluent = loadstring(game:HttpGet("https://github.com/dawid-scripts/Fluent/releases/latest/download/main.lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/SaveManager.lua"))()
local InterfaceManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/dawid-scripts/Fluent/master/Addons/InterfaceManager.lua"))()

local Window = Fluent:CreateWindow({
    Title = "Draco.Hhb | BETA " .. Fluent.Version,
    SubTitle = "by Draco,Jabdaphrophet",
    TabWidth = 160,
    Size = UDim2.fromOffset(430, 430),
    Acrylic = false,
    Theme = "Dark",
    MinimizeKey = Enum.KeyCode.LeftControl
})

local Tabs = {
    Main = Window:AddTab({ Title = "Main", Icon = "" }),
    Misc = Window:AddTab({ Title = "Misc", Icon = "" })
}

local Options = Fluent.Options
local CamlockToggle = Tabs.Main:AddToggle("CamlockToggle", { Title = "Enable Camlock", Default = false })
local ArcDropdown = Tabs.Main:AddDropdown("ArcType", {
    Title = "Select Arc Type",
    Values = { "High Arc", "Middle Arc", "Low Arc", "Realistic Arc" },
    Multi = false,
    Default = "Realistic Arc"
})

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Workspace = game:GetService("Workspace")
local Player = Players.LocalPlayer
local Camera = Workspace.CurrentCamera
local CamlockEnabled = false
local CamlockActive = false
local ArcType = "Realistic Arc"

CamlockToggle:OnChanged(function()
    CamlockEnabled = Options.CamlockToggle.Value
end)

ArcDropdown:OnChanged(function(Value)
    ArcType = Value
end)

local function HasBall()
    return Player.Character and Player.Character:FindFirstChild("Basketball") ~= nil
end

local function GetGoal()
    local Distance, Goal = math.huge, nil
    local Character = Player.Character
    if not Character or not Character.PrimaryPart then return nil end
    local CharacterPosition = Character.PrimaryPart.Position  

    for _, court in ipairs(Workspace:GetChildren()) do
        for _, Obj in ipairs(court:GetDescendants()) do
            if Obj.Name == "Swish" and Obj.Parent:FindFirstChildOfClass("TouchTransmitter") then
                local Magnitude = (CharacterPosition - Obj.Parent.Position).Magnitude
                if Magnitude < Distance then
                    Distance = Magnitude
                    Goal = Obj.Parent
                end
            end
        end
    end

    return Goal, Distance
end

local function CalculateArc(distance)
    if ArcType == "High Arc" then
        return math.max(0.02 * (distance ^ 2) - 1.5 * distance + 50, 10)
    elseif ArcType == "Middle Arc" then
        return math.max(0.017 * (distance ^ 2) - 1.2 * distance + 35, 8)
    elseif ArcType == "Low Arc" then
        return math.max(0.015 * (distance ^ 2) - 1.0 * distance + 20, 5)
    else
        return math.max(0.018 * (distance ^ 2) - 1.3 * distance + 35, 8)
    end
end

local function ActivateCamlock()
    if not CamlockEnabled or not HasBall() or CamlockActive then return end
    CamlockActive = true

    local Goal, Distance = GetGoal()
    if Goal then
        local ArcHeight = CalculateArc(math.floor(Distance))
        local BasketPosition = Goal.Position + Vector3.new(0, ArcHeight, 0)

        Camera.CFrame = CFrame.new(Camera.CFrame.Position, BasketPosition + Vector3.new(0, 0.1, 0))

        task.wait(1)

        Camera.CameraType = Enum.CameraType.Custom
    end

    CamlockActive = false
end

local Humanoid = Player.Character and Player.Character:FindFirstChild("Humanoid")
if Humanoid then
    Humanoid.StateChanged:Connect(function(_, NewState)
        if CamlockEnabled and HasBall() and NewState == Enum.HumanoidStateType.Jumping then
            ActivateCamlock()
        end
    end)
end

local ReachEnabled = false
local BallReach = { Distance = 2 }

local function GetClosestBall()
    local ClosestBall, ClosestDistance = nil, math.huge
    local RootPart = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")

    if not RootPart then return nil end

    for _, OtherPlayer in ipairs(Players:GetPlayers()) do
        if OtherPlayer ~= Player and OtherPlayer.Character then
            local Ball = OtherPlayer.Character:FindFirstChild("Basketball") and OtherPlayer.Character.Basketball:FindFirstChild("Ball")
            if Ball then
                local Distance = (Ball.Position - RootPart.Position).Magnitude
                if Distance < BallReach.Distance and Distance < ClosestDistance then
                    ClosestBall = Ball
                    ClosestDistance = Distance
                end
            end
        end
    end
    return ClosestBall
end

local function GetClosestPart(Ball)
    if not Player.Character then return nil end
    local ClosestPart, ClosestDistance = nil, math.huge
    for _, Part in ipairs(Player.Character:GetChildren()) do
        if Part:IsA("BasePart") then
            local Distance = (Part.Position - Ball.Position).Magnitude
            if Distance < ClosestDistance then
                ClosestDistance = Distance
                ClosestPart = Part
            end
        end
    end
    return ClosestPart
end

RunService.RenderStepped:Connect(function()
    if not ReachEnabled then return end
    local Ball = GetClosestBall()
    local RootPart = Ball and GetClosestPart(Ball)
    if Ball and RootPart then
        firetouchinterest(RootPart, Ball, 0)
        task.wait()
        firetouchinterest(RootPart, Ball, 1)
    end
end)

local EnableReachToggle = Tabs.Misc:AddToggle("EnableReach", { Title = "Enable Reach", Default = false })
EnableReachToggle:OnChanged(function(Value)
    ReachEnabled = Value
end)

local Slider = Tabs.Misc:AddSlider("Slider", {
    Title = "Adjust Reach",
    Description = "Increase arm reach",
    Default = 2,
    Min = 0,
    Max = 100,
    Rounding = 1,
    Callback = function(Value)
        BallReach.Distance = tonumber(Value) or 2
    end
})
